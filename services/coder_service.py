# kintsugi_ava/services/coder_service.py
# The service responsible for generating code.

from core.event_bus import EventBus


class CoderService:
    """
    The CoderService is responsible for turning a user's prompt
    into generated code.

    In Phase 1, this is a "dumb" service that returns a hard-coded
    project to demonstrate the end-to-end workflow.

    In Phase 2, this will house the real AI logic.
    """

    def __init__(self, event_bus: EventBus):
        self.event_bus = event_bus

    def generate_code(self, prompt: str):
        """
        The main method for the service. Takes a prompt and will
        eventually produce code.
        """
        print(f"[CoderService] Received request to generate code for prompt: '{prompt}'")

        # --- Placeholder Logic ---
        # In the future, this will involve complex AI calls.
        # For now, we simulate a result after a short delay.

        # Simulate generating a file
        file_name = "calculator.py"
        file_content = """
# A simple calculator app generated by Kintsugi AvA
import sys
from PySide6.QtWidgets import QApplication, QWidget, QVBoxLayout, QGridLayout, QPushButton, QLineEdit

class Calculator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Kintsugi Calculator")
        self.layout = QVBoxLayout(self)
        self.display = QLineEdit()
        self.display.setReadOnly(True)
        self.layout.addWidget(self.display)
        self.grid_layout = QGridLayout()
        buttons = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            '0', '.', '=', '+'
        ]
        row, col = 0, 0
        for text in buttons:
            button = QPushButton(text)
            button.clicked.connect(self.on_button_click)
            self.grid_layout.addWidget(button, row, col)
            col += 1
            if col > 3:
                col = 0
                row += 1
        self.layout.addLayout(self.grid_layout)

    def on_button_click(self):
        button = self.sender()
        text = button.text()
        if text == '=':
            try:
                result = str(eval(self.display.text()))
                self.display.setText(result)
            except Exception:
                self.display.setText("Error")
        else:
            self.display.setText(self.display.text() + text)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    calc = Calculator()
    calc.show()
    sys.exit(app.exec())
"""
        print(f"[CoderService] Generated content for {file_name}")
        # When done, it emits an event with the result.
        # The Code Viewer will listen for this.
        self.event_bus.emit("code_generation_complete", {file_name: file_content})